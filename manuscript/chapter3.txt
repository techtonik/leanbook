# Reasons why Python packaging suxx

Python docs are good at explaining the magic rituals, but apparently
they are insufficient to explain *why* the rituals were born on the
first place. Like with many solutions that were born in evolutionary
ways there are some atavisms and things preserved for backward
compatibility that make the whole system look awkward.

Here are some reason why this happens and what to do about that.

1. Technical 

That one is obvious. People write more code, cover more user stories,
complexity increases, developers hit Norris' Number. Natural process
of evolution.

Complexity of texts describing the system and code can be reduced
with diagrams, visualizations and new media material that is more
suitable for new people.

2. Social

People think differently and use computers differently, but not
everybody is aware of the details. Something that "works for me" for
those who have commit rights maybe a major showstopper for other,
less experienced people.

So, there is a gap between people who already know how the stuff
works, and people who don't know about it. The stuff is even worse
because of `curse of knowledge` where people with experience don't
realise how hard it is to be without that system knowledge.

And without that experience it is hard to get through the complexity
of details to fix things, even with a fair amount of work being made
to document the stuff (including this book). Making more experienced
people aware of the `curse of knowledge` concept will make people
consider spending more time on building more accessible materials.

3. Economical

New generation of people is raised to consume information in small
chunks in visual way. They prefer the way of engaging experiments
rather than taking their time to read through long texts. Producing
visual media requires a lot of time that no company will pay for,
and a lot of thinking that no company will wait for.

There are a lot of designers, people interested to play with
visualization and making Python a better tool, but only few of a
thousands are capable of hacking the economy to free themselves for
doing this. Why? Because current economy discourages to spend time
on stuff that is not profitable. And the less free resource we have,
the less money is generated to pay bills, loans and buy out time for
doing good things. Making Python better is a good thing, but in
consumption economy there is no laws to compensate time for people
who share what they know for free. There are more adaptable economic
models to support that, but they require initial seed of investments
to build up a protection scheme so that bigger economy won't consume
the new one.

In the meanwhile, what could be done? Supporing the mission behind
Gratipay and thinking about how to compensate the open source value
in real world.
